"""
Tokenizer module for the transformer model.
By: Florian Wiesner
Date: 2025-04-01
"""

import torch
import torch.nn as nn

from einops import rearrange


class Image2Patch(nn.Module):
    """
    Convert a 5D input tensor (b, time, height, width, channels) to patches of size 16x16.
    The time steps are combined with the channels to form a single input channel dimension.

    The patches are generated by two convolutions with GELU and instance normalization.
    """

    def __init__(
        self,
        in_channels: int,
        time_steps: int,
        dim_embed: int,
    ):
        super().__init__()
        self.register_buffer("patch_size", torch.tensor(16))
        self.in_channels = in_channels * time_steps
        self.out_channels = dim_embed * time_steps
        self.time_steps = time_steps

        patch_net = [
            nn.Conv2d(
                in_channels=self.in_channels,
                out_channels=self.out_channels,
                kernel_size=4,
                stride=4,
                padding="valid",
                bias=False,
            ),
            nn.InstanceNorm2d(
                num_features=self.out_channels,
                affine=True,
            ),
            nn.GELU(),
            nn.Conv2d(
                in_channels=self.out_channels,
                out_channels=self.out_channels,
                kernel_size=4,
                stride=4,
                padding="valid",
                bias=False,
            ),
            nn.InstanceNorm2d(
                num_features=self.out_channels,
                affine=True,
            ),
            nn.GELU(),
        ]

        self.patch_net = nn.Sequential(*patch_net)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """
        Convert a 5D input tensor (b, time, height, width, channels) to patches

        Parameters
        ----------
        x : torch.Tensor
            Input tensor of shape (batch_size, time, height, width, channels)

        Returns
        -------
        torch.Tensor
            Output tensor of shape (batch_size, time, height, width, dim_embed)
        """
        b, t, h, w, c = x.shape
        x = rearrange(x, "b t h w c -> b (t c) h w")
        x = self.patch_net(x)
        x = rearrange(x, "b (t c) h w -> b t h w c", t=t)
        return x


class Patch2Image(nn.Module):
    """
    Converts back into 5D image tensor from patches.

    The patches are generated by two transposed convolutions with GELU and instance normalization.
    """

    def __init__(
        self,
        dim_embed: int,
        out_channels: int,
        time_steps: int,
    ):
        super().__init__()
        self.register_buffer("patch_size", torch.tensor(16))
        self.in_channels = dim_embed * time_steps
        self.out_channels = out_channels * time_steps
        self.time_steps = time_steps
        de_patch_net = [
            nn.ConvTranspose2d(
                in_channels=self.in_channels,
                out_channels=self.in_channels,
                kernel_size=4,
                stride=4,
                padding=0,
                bias=False,
            ),
            nn.InstanceNorm2d(
                num_features=self.in_channels,
                affine=True,
            ),
            nn.GELU(),
            nn.ConvTranspose2d(
                in_channels=self.in_channels,
                out_channels=self.out_channels,
                kernel_size=4,
                stride=4,
                padding=0,
                bias=False,
            ),
            nn.InstanceNorm2d(
                num_features=self.out_channels,
                affine=True,
            ),
            nn.GELU(),
        ]

        self.de_patch_net = nn.Sequential(*de_patch_net)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """
        Convert a 5D input tensor (batch_size, time, height, width, channels) to a 5D output tensor of images.
        """
        b, t, h, w, c = x.shape
        x = rearrange(x, "b t h w c -> b (t c) h w")
        x = self.de_patch_net(x)
        x = rearrange(x, "b (t c) h w -> b t h w c", t=t)
        return x
